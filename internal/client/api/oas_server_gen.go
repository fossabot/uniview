// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetPlayerPause implements get-player-pause operation.
	//
	// Query the player state on whether it is currently paused and provides the playback position if it
	// is.
	//
	// GET /player/pause
	GetPlayerPause(ctx context.Context) (*Pause, error)
	// GetPlayerPosition implements get-player-position operation.
	//
	// Query the player for its current playback position.
	//
	// GET /player/position
	GetPlayerPosition(ctx context.Context) (PlaybackPosition, error)
	// GetStatus implements get-status operation.
	//
	// Returns information on the client currently used.
	//
	// GET /status
	GetStatus(ctx context.Context) (*Status, error)
	// PutPlayerPause implements put-player-pause operation.
	//
	// Set the player into the given pause state.
	//
	// PUT /player/pause
	PutPlayerPause(ctx context.Context, req OptPutPlayerPauseReq) error
	// PutPlayerPosition implements put-player-position operation.
	//
	// Seek to the specified position.
	//
	// PUT /player/position
	PutPlayerPosition(ctx context.Context, req OptPlaybackPosition) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
