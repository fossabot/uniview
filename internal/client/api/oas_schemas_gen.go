// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/jx"
)

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlaybackPosition returns new OptPlaybackPosition with value set to v.
func NewOptPlaybackPosition(v PlaybackPosition) OptPlaybackPosition {
	return OptPlaybackPosition{
		Value: v,
		Set:   true,
	}
}

// OptPlaybackPosition is optional PlaybackPosition.
type OptPlaybackPosition struct {
	Value PlaybackPosition
	Set   bool
}

// IsSet returns true if OptPlaybackPosition was set.
func (o OptPlaybackPosition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlaybackPosition) Reset() {
	var v PlaybackPosition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlaybackPosition) SetTo(v PlaybackPosition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlaybackPosition) Get() (v PlaybackPosition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlaybackPosition) Or(d PlaybackPosition) PlaybackPosition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPutPlayerPauseReq returns new OptPutPlayerPauseReq with value set to v.
func NewOptPutPlayerPauseReq(v PutPlayerPauseReq) OptPutPlayerPauseReq {
	return OptPutPlayerPauseReq{
		Value: v,
		Set:   true,
	}
}

// OptPutPlayerPauseReq is optional PutPlayerPauseReq.
type OptPutPlayerPauseReq struct {
	Value PutPlayerPauseReq
	Set   bool
}

// IsSet returns true if OptPutPlayerPauseReq was set.
func (o OptPutPlayerPauseReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPutPlayerPauseReq) Reset() {
	var v PutPlayerPauseReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPutPlayerPauseReq) SetTo(v PutPlayerPauseReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPutPlayerPauseReq) Get() (v PutPlayerPauseReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPutPlayerPauseReq) Or(d PutPlayerPauseReq) PutPlayerPauseReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVersion returns new OptVersion with value set to v.
func NewOptVersion(v Version) OptVersion {
	return OptVersion{
		Value: v,
		Set:   true,
	}
}

// OptVersion is optional Version.
type OptVersion struct {
	Value Version
	Set   bool
}

// IsSet returns true if OptVersion was set.
func (o OptVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVersion) Reset() {
	var v Version
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVersion) SetTo(v Version) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVersion) Get() (v Version, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVersion) Or(d Version) Version {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Holds information on the players pause state.
// Ref: #/components/schemas/Pause
type Pause struct {
	Paused        OptBool             `json:"paused"`
	PausedMinusAt OptPlaybackPosition `json:"paused-at"`
}

// GetPaused returns the value of Paused.
func (s *Pause) GetPaused() OptBool {
	return s.Paused
}

// GetPausedMinusAt returns the value of PausedMinusAt.
func (s *Pause) GetPausedMinusAt() OptPlaybackPosition {
	return s.PausedMinusAt
}

// SetPaused sets the value of Paused.
func (s *Pause) SetPaused(val OptBool) {
	s.Paused = val
}

// SetPausedMinusAt sets the value of PausedMinusAt.
func (s *Pause) SetPausedMinusAt(val OptPlaybackPosition) {
	s.PausedMinusAt = val
}

type PlaybackPosition float32

// PutPlayerPauseAccepted is response for PutPlayerPause operation.
type PutPlayerPauseAccepted struct{}

type PutPlayerPauseReq struct {
	Pause OptBool `json:"pause"`
}

// GetPause returns the value of Pause.
func (s *PutPlayerPauseReq) GetPause() OptBool {
	return s.Pause
}

// SetPause sets the value of Pause.
func (s *PutPlayerPauseReq) SetPause(val OptBool) {
	s.Pause = val
}

// PutPlayerPositionAccepted is response for PutPlayerPosition operation.
type PutPlayerPositionAccepted struct{}

// Holds information on the currently running client.
// Ref: #/components/schemas/Status
type Status struct {
	Connection jx.Raw     `json:"connection"`
	Player     OptString  `json:"player"`
	Version    OptVersion `json:"version"`
}

// GetConnection returns the value of Connection.
func (s *Status) GetConnection() jx.Raw {
	return s.Connection
}

// GetPlayer returns the value of Player.
func (s *Status) GetPlayer() OptString {
	return s.Player
}

// GetVersion returns the value of Version.
func (s *Status) GetVersion() OptVersion {
	return s.Version
}

// SetConnection sets the value of Connection.
func (s *Status) SetConnection(val jx.Raw) {
	s.Connection = val
}

// SetPlayer sets the value of Player.
func (s *Status) SetPlayer(val OptString) {
	s.Player = val
}

// SetVersion sets the value of Version.
func (s *Status) SetVersion(val OptVersion) {
	s.Version = val
}

// Ref: #/components/schemas/Version
type Version struct {
	Major OptInt `json:"major"`
	Minor OptInt `json:"minor"`
	Patch OptInt `json:"patch"`
}

// GetMajor returns the value of Major.
func (s *Version) GetMajor() OptInt {
	return s.Major
}

// GetMinor returns the value of Minor.
func (s *Version) GetMinor() OptInt {
	return s.Minor
}

// GetPatch returns the value of Patch.
func (s *Version) GetPatch() OptInt {
	return s.Patch
}

// SetMajor sets the value of Major.
func (s *Version) SetMajor(val OptInt) {
	s.Major = val
}

// SetMinor sets the value of Minor.
func (s *Version) SetMinor(val OptInt) {
	s.Minor = val
}

// SetPatch sets the value of Patch.
func (s *Version) SetPatch(val OptInt) {
	s.Patch = val
}
