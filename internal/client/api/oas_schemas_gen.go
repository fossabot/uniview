// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/Directory
type Directory struct {
	Root         int    `json:"root"`
	RelativePath string `json:"relative_path"`
	Content      []File `json:"content"`
}

// GetRoot returns the value of Root.
func (s *Directory) GetRoot() int {
	return s.Root
}

// GetRelativePath returns the value of RelativePath.
func (s *Directory) GetRelativePath() string {
	return s.RelativePath
}

// GetContent returns the value of Content.
func (s *Directory) GetContent() []File {
	return s.Content
}

// SetRoot sets the value of Root.
func (s *Directory) SetRoot(val int) {
	s.Root = val
}

// SetRelativePath sets the value of RelativePath.
func (s *Directory) SetRelativePath(val string) {
	s.RelativePath = val
}

// SetContent sets the value of Content.
func (s *Directory) SetContent(val []File) {
	s.Content = val
}

func (*Directory) getFilesRootRelpathRes() {}

// Ref: #/components/schemas/File
type File struct {
	Name      string `json:"name"`
	Directory bool   `json:"directory"`
}

// GetName returns the value of Name.
func (s *File) GetName() string {
	return s.Name
}

// GetDirectory returns the value of Directory.
func (s *File) GetDirectory() bool {
	return s.Directory
}

// SetName sets the value of Name.
func (s *File) SetName(val string) {
	s.Name = val
}

// SetDirectory sets the value of Directory.
func (s *File) SetDirectory(val bool) {
	s.Directory = val
}

// GetFilesRootRelpathNotFound is response for GetFilesRootRelpath operation.
type GetFilesRootRelpathNotFound struct{}

func (*GetFilesRootRelpathNotFound) getFilesRootRelpathRes() {}

type GetStatusOK Status

func (*GetStatusOK) getStatusRes() {}

type GetStatusServiceUnavailable Status

func (*GetStatusServiceUnavailable) getStatusRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlaybackPosition returns new OptPlaybackPosition with value set to v.
func NewOptPlaybackPosition(v PlaybackPosition) OptPlaybackPosition {
	return OptPlaybackPosition{
		Value: v,
		Set:   true,
	}
}

// OptPlaybackPosition is optional PlaybackPosition.
type OptPlaybackPosition struct {
	Value PlaybackPosition
	Set   bool
}

// IsSet returns true if OptPlaybackPosition was set.
func (o OptPlaybackPosition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlaybackPosition) Reset() {
	var v PlaybackPosition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlaybackPosition) SetTo(v PlaybackPosition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlaybackPosition) Get() (v PlaybackPosition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlaybackPosition) Or(d PlaybackPosition) PlaybackPosition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPutPlayerPauseReq returns new OptPutPlayerPauseReq with value set to v.
func NewOptPutPlayerPauseReq(v PutPlayerPauseReq) OptPutPlayerPauseReq {
	return OptPutPlayerPauseReq{
		Value: v,
		Set:   true,
	}
}

// OptPutPlayerPauseReq is optional PutPlayerPauseReq.
type OptPutPlayerPauseReq struct {
	Value PutPlayerPauseReq
	Set   bool
}

// IsSet returns true if OptPutPlayerPauseReq was set.
func (o OptPutPlayerPauseReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPutPlayerPauseReq) Reset() {
	var v PutPlayerPauseReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPutPlayerPauseReq) SetTo(v PutPlayerPauseReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPutPlayerPauseReq) Get() (v PutPlayerPauseReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPutPlayerPauseReq) Or(d PutPlayerPauseReq) PutPlayerPauseReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Holds information on the players pause state.
// Ref: #/components/schemas/Pause
type Pause struct {
	Paused        bool                `json:"paused"`
	PausedMinusAt OptPlaybackPosition `json:"paused-at"`
}

// GetPaused returns the value of Paused.
func (s *Pause) GetPaused() bool {
	return s.Paused
}

// GetPausedMinusAt returns the value of PausedMinusAt.
func (s *Pause) GetPausedMinusAt() OptPlaybackPosition {
	return s.PausedMinusAt
}

// SetPaused sets the value of Paused.
func (s *Pause) SetPaused(val bool) {
	s.Paused = val
}

// SetPausedMinusAt sets the value of PausedMinusAt.
func (s *Pause) SetPausedMinusAt(val OptPlaybackPosition) {
	s.PausedMinusAt = val
}

type PlaybackPosition float32

// PutPlayerPauseAccepted is response for PutPlayerPause operation.
type PutPlayerPauseAccepted struct{}

type PutPlayerPauseReq struct {
	Pause OptBool `json:"pause"`
}

// GetPause returns the value of Pause.
func (s *PutPlayerPauseReq) GetPause() OptBool {
	return s.Pause
}

// SetPause sets the value of Pause.
func (s *PutPlayerPauseReq) SetPause(val OptBool) {
	s.Pause = val
}

// PutPlayerPositionAccepted is response for PutPlayerPosition operation.
type PutPlayerPositionAccepted struct{}

// Holds information on the currently running client.
// Ref: #/components/schemas/Status
type Status struct {
	Connection StatusConnection `json:"connection"`
	Player     string           `json:"player"`
	Version    Version          `json:"version"`
}

// GetConnection returns the value of Connection.
func (s *Status) GetConnection() StatusConnection {
	return s.Connection
}

// GetPlayer returns the value of Player.
func (s *Status) GetPlayer() string {
	return s.Player
}

// GetVersion returns the value of Version.
func (s *Status) GetVersion() Version {
	return s.Version
}

// SetConnection sets the value of Connection.
func (s *Status) SetConnection(val StatusConnection) {
	s.Connection = val
}

// SetPlayer sets the value of Player.
func (s *Status) SetPlayer(val string) {
	s.Player = val
}

// SetVersion sets the value of Version.
func (s *Status) SetVersion(val Version) {
	s.Version = val
}

type StatusConnection string

const (
	StatusConnectionOk         StatusConnection = "ok"
	StatusConnectionConnecting StatusConnection = "connecting"
)

// MarshalText implements encoding.TextMarshaler.
func (s StatusConnection) MarshalText() ([]byte, error) {
	switch s {
	case StatusConnectionOk:
		return []byte(s), nil
	case StatusConnectionConnecting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StatusConnection) UnmarshalText(data []byte) error {
	switch StatusConnection(data) {
	case StatusConnectionOk:
		*s = StatusConnectionOk
		return nil
	case StatusConnectionConnecting:
		*s = StatusConnectionConnecting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Version
type Version struct {
	Major  int       `json:"major"`
	Minor  int       `json:"minor"`
	Patch  int       `json:"patch"`
	Suffix OptString `json:"suffix"`
}

// GetMajor returns the value of Major.
func (s *Version) GetMajor() int {
	return s.Major
}

// GetMinor returns the value of Minor.
func (s *Version) GetMinor() int {
	return s.Minor
}

// GetPatch returns the value of Patch.
func (s *Version) GetPatch() int {
	return s.Patch
}

// GetSuffix returns the value of Suffix.
func (s *Version) GetSuffix() OptString {
	return s.Suffix
}

// SetMajor sets the value of Major.
func (s *Version) SetMajor(val int) {
	s.Major = val
}

// SetMinor sets the value of Minor.
func (s *Version) SetMinor(val int) {
	s.Minor = val
}

// SetPatch sets the value of Patch.
func (s *Version) SetPatch(val int) {
	s.Patch = val
}

// SetSuffix sets the value of Suffix.
func (s *Version) SetSuffix(val OptString) {
	s.Suffix = val
}
