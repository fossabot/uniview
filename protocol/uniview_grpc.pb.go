// SPDX-FileCopyrightText: Â© Moritz Poldrack
// SPDX-License-Identifier: AGPL-3.0-or-later

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: protocol/uniview.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UniView_Room_FullMethodName = "/protocol.UniView/Room"
)

// UniViewClient is the client API for UniView service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniViewClient interface {
	Room(ctx context.Context, opts ...grpc.CallOption) (UniView_RoomClient, error)
}

type uniViewClient struct {
	cc grpc.ClientConnInterface
}

func NewUniViewClient(cc grpc.ClientConnInterface) UniViewClient {
	return &uniViewClient{cc}
}

func (c *uniViewClient) Room(ctx context.Context, opts ...grpc.CallOption) (UniView_RoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &UniView_ServiceDesc.Streams[0], UniView_Room_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uniViewRoomClient{stream}
	return x, nil
}

type UniView_RoomClient interface {
	Send(*RoomEvent) error
	Recv() (*RoomEvent, error)
	grpc.ClientStream
}

type uniViewRoomClient struct {
	grpc.ClientStream
}

func (x *uniViewRoomClient) Send(m *RoomEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uniViewRoomClient) Recv() (*RoomEvent, error) {
	m := new(RoomEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UniViewServer is the server API for UniView service.
// All implementations must embed UnimplementedUniViewServer
// for forward compatibility
type UniViewServer interface {
	Room(UniView_RoomServer) error
	mustEmbedUnimplementedUniViewServer()
}

// UnimplementedUniViewServer must be embedded to have forward compatible implementations.
type UnimplementedUniViewServer struct {
}

func (UnimplementedUniViewServer) Room(UniView_RoomServer) error {
	return status.Errorf(codes.Unimplemented, "method Room not implemented")
}
func (UnimplementedUniViewServer) mustEmbedUnimplementedUniViewServer() {}

// UnsafeUniViewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniViewServer will
// result in compilation errors.
type UnsafeUniViewServer interface {
	mustEmbedUnimplementedUniViewServer()
}

func RegisterUniViewServer(s grpc.ServiceRegistrar, srv UniViewServer) {
	s.RegisterService(&UniView_ServiceDesc, srv)
}

func _UniView_Room_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UniViewServer).Room(&uniViewRoomServer{stream})
}

type UniView_RoomServer interface {
	Send(*RoomEvent) error
	Recv() (*RoomEvent, error)
	grpc.ServerStream
}

type uniViewRoomServer struct {
	grpc.ServerStream
}

func (x *uniViewRoomServer) Send(m *RoomEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uniViewRoomServer) Recv() (*RoomEvent, error) {
	m := new(RoomEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UniView_ServiceDesc is the grpc.ServiceDesc for UniView service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniView_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.UniView",
	HandlerType: (*UniViewServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Room",
			Handler:       _UniView_Room_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/uniview.proto",
}
